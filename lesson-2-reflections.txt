What happens when you initialize a repository? Why do you need to do it?

Only then, the repository can be used. After having initialized the repository
it can track the files in the repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

the staging area is not the repository yet and hence it offers space to
explore things.

How can you use the staging area to make sure you have one commit per logical
change?

When I have many changes I can gather them in the staging area and group
them there into logical packages and only then commit them.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

When I want to experiment around with new features or develop a version
in another language and found and error in the master branch. e.g.
I can merge the corrected master branch with the experimental version.

How do the diagrams help you visualize the branch structure?

Only with diagrams I can properly see the history of the versions.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

the result consists of the changes 2 branches have in common plus the dele-
tions and additions executed in (at least) one branch. As a result, only one
branch ( the master) carries the full history. Therefore, the merger is shown
by lines coming together.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

pros for automatic merges would be that it would be easier to do but on the
other side, it will not be possible to correctly merge in a general case.
that would be a pro for merging manually.
